{"version":3,"sources":["Game.js"],"names":["Game","_classCallCheck","this","lives","width","height","entities","map","Map","roomFromText","position","result","s","x","y","forEach","i","what","removed","direction","destination","Position","hero","Direction","UP","RIGHT","DOWN","LEFT","coins","remove","name","Math","round","random","score"],"mappings":"uZAAMA,gBACJ,SAAAA,IAAcC,gBAAAC,KAAAF,GACZE,KAAKC,MAAQ,EACbD,KAAKE,MAAQ,GACbF,KAAKG,OAAS,EACdH,KAAKI,SAAW,GAChBJ,KAAKK,IAAM,IAAIC,IAAIN,MACnBA,KAAKK,IAAIE,aAAT,gJAFAC,GACA,IAAAC,EAAW,KAaX,OAZAT,KAAKK,SAAIE,QAAT,SAAAG,GAQDA,EAAAF,SAAAG,IAAAH,EAAAG,GAAAD,EAAAF,SAAAI,IAAAJ,EAAAI,GAMS,MAAQH,IACVA,EAASC,KAHVN,iCAGCK,GACDT,KAAAI,SAAAS,QAAA,SAAAH,EAAAI,GACFJ,IAAAK,IALHL,EAAAM,SAAA,kCAWAC,GACE,IAAAC,EAAA,IAAgBC,SAAAnB,KAAAoB,KAAAZ,SAAAG,EAAAX,KAAAoB,KAAAZ,SAAAI,GAGfS,UAAAC,IAAAL,EACFC,EALDN,GAAA,EAMDS,UAAAE,OAAAN,EAQGC,EAAYP,GAAK,EACRU,UAAUG,MAAQP,EAC3BC,EAAYN,GAAK,EAPfM,UAAcO,MAAIN,IASpBD,EAAYP,GAAK,GALlB,IAFDI,EAEOf,KAAIqB,KAAAA,GAEV,GAFM,OAEIA,GAAkBJ,UAAlBI,EAAUG,MAAmBT,EAAAC,QACtCE,KAAAA,KAAAA,SAAAA,OADK,GAEA,aAAcO,EAAQR,KAC3BC,KAAAA,KAAAA,OAAiBH,EAAjBW,MACD1B,KAAA2B,OAAAZ,QASM,GAAI,WAAaA,EAAKa,KAAM,CAEfC,KAAKC,MAAsB,EAAhBD,KAAKE,WAPvBhB,KAAQA,MAAjB,EAAsBa,KAALG,WAArB/B,KAEOoB,KAAIY,OAAAjB,EAAeA,MACxBf,KAAKoB,OAAKY,IADLhC,KAGAC,OAAI,oCAKP,MAAA,CACAmB,KAAApB,KAAK2B,KACNvB,SAAMJ,KAAAI,SACLF,MAAAF,KAAKC,MACNE,OAAAH,KAAAG","file":"Game.min.js","sourcesContent":["class Game {\r\n  constructor() {\r\n    this.lives = 3;\r\n    this.width = 12;\r\n    this.height = 8;\r\n    this.entities = [];\r\n    this.map = new Map(this);\r\n    this.map.roomFromText(`\r\n    ############\r\n    #....Z.....#\r\n    #.@..#..$..#\r\n    #....#######\r\n    ######\r\n    `);\r\n    // this.map.room();\r\n  }\r\n\r\n  look(position) {\r\n    let result = null;\r\n    this.entities.forEach((s) => {\r\n      if (s.position.x === position.x && s.position.y === position.y) {\r\n        if (null == result) {\r\n          result = s;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  remove(what) {\r\n    this.entities.forEach((s, i) => {\r\n      if (s === what) {\r\n        s.removed = true;\r\n        //this.entities.splice(i, 1); //DELETE 1 at the current index i\r\n      }\r\n    });\r\n  }\r\n\r\n  move(direction) {\r\n    let destination = new Position(this.hero.position.x, this.hero.position.y);\r\n\r\n    if (Direction.UP == direction) {\r\n      destination.y -= 1;\r\n    } else if (Direction.RIGHT == direction) {\r\n      destination.x += 1;\r\n    } else if (Direction.DOWN == direction) {\r\n      destination.y += 1;\r\n    } else if (Direction.LEFT == direction) {\r\n      destination.x -= 1;\r\n    }\r\n\r\n    let what = this.look(destination);\r\n\r\n    if (null === what || what.name === \"floor\" || what.removed) {\r\n      this.hero.position = destination;\r\n    } else if (\"treasure\" === what.name) {\r\n      this.hero.score += what.coins;\r\n      this.remove(what);\r\n    } else if (\"zombie\" === what.name) {\r\n      //FIGHT!\r\n      let zombie_roll = Math.round(Math.random() * 6);\r\n      let hero_roll = Math.round(Math.random() * 6);\r\n      if (hero_roll >= zombie_roll) {\r\n        this.hero.score += what.coins;\r\n        this.remove(what);\r\n      } else {\r\n        this.lives -= 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  status() {\r\n    return {\r\n      hero: this.hero,\r\n      entities: this.entities,\r\n      width: this.width,\r\n      height: this.height,\r\n    };\r\n  }\r\n}\r\n"]}